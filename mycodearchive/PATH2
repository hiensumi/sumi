// hiensumi: Maybe, success will come tomorrow. Thus, just keep trying! =) "Z/x
#include "bits/stdc++.h"
#define fod(i,a,b) for(int i = a;i <= b; i++)
#define fok(i,a,b) for(int i = a;i >= b; i--)
#define ll long long
#define int long long
#define fi first
#define se second
#define mask(i) (1LL<<(i))
#define BITpos(a,i) ((a >> i) & 1LL)
#define pb push_back
#define el '\n'
#define all(v) v.begin(), v.end()
#define odd(i) (i & 1LL)
using namespace std;
typedef pair<int, int> ii;
const int MOD = 1e9 + 7;
inline void kill(){cerr << "\nTime: " << clock() << "ms\n"; cerr << "⏁⊑⟒ ⋔⍜⍜⋏ ⍙⏃⌇ ⌇⍜ ⏚⟒⏃⎍⏁⟟⎎⎍⌰ ⏁⊑⏃⏁ ⏁⊑⟒⍀⟒ ⍙⏃⌇ ⏃ ⋔⟟⍀⍀⍜⍀ ⟟⋏ ⏁⊑⟒ ⍜☊⟒⏃⋏.\n"; exit(0);}
inline void add(int &x, int y, int mod = MOD) { x += y; while (x >= mod) x -= mod; while (x < 0) x += mod;}
inline void mul(int &x, int y, int mod = MOD) { x = (x * 1LL * y) % mod;}
inline int bpow(int x, int y, int mod = MOD) { int ans = 1; while (y) { if (y & 1) mul(ans, x, mod); mul(x, x, mod); y >>= 1;} return ans;}
inline int bp(int a, int b){int res = 1; while (b > 0) {if (b & 1) res = res * a; a = a * a; b >>= 1; } return res;}
inline int Inv(int x, int mod = MOD) { return bpow(x, mod - 2, mod);}
inline int Div(int x, int y, int mod = MOD) { int tmp = x; mul(tmp, Inv(y, mod), mod); return tmp;}
template<class T> bool mini(T& a,T b){return (a>=b)?a=b,1:0;}
template<class T> bool maxi(T& a,T b){return (a<=b)?a=b,1:0;}
struct point{int x, y;};
struct edge{int u, v, c;};
/*int find(int u) { if (par[u] == u) return u; return par[u] = find(par[u]);}
bool join(int u, int v) {int paru = find(u), parv = find(v); if (paru == parv) return false; par[parv] = paru; return true; }*/ 
const ll INF = 1e18, base = 1e6 + 5, multitest = 0;
//"Life is a daring adventure or it is nothing at all." -Helen Keller...
//"Success isn't determined by how many times you win, but by how you play the week after you lose." -Pele...
#define name ""
#define ld long double
// remember to reset value for multitestcase
// she is your motivation!!!
void init(){
    
}
int n, m, W, na, nb, gr[base];
edge e[base];
void inp(){
	cin >> n >> m >> W >> na >> nb;
	fod(i,1,m){
		int u, v, c;
		cin >> u >> v >> c;
		e[i] = {u,v,c};
	}
}
namespace find_r1{
	int dd[base], tplt = 0, fa[base], fb[base];
	vector <int> g[base];
	void dfs(int u){
		dd[u] = 1;
		if(gr[u] == 1) fa[tplt]++;
		else if(gr[u] == 2) fb[tplt]++;
		for(int v : g[u]) if(dd[v] == 0){
			dfs(v);
		}
	}
	int process(){
		fod(i,1,m){
			if(e[i].c <= W){
				g[e[i].u].pb(e[i].v);
				g[e[i].v].pb(e[i].u);
			}
		}
		
		fod(i,1,n) if(dd[i] == 0) tplt++, dfs(i);
		int r1 = 0;
		fod(i,1,tplt) r1 += fa[i] * fb[i];
		return r1;
	}
}
namespace find_r2{
	int dd[base], tplt = 0, fa[base], fb[base];
	vector <int> g[base];
	void dfs(int u){
		dd[u] = 1;
		if(gr[u] == 1) fa[tplt]++;
		else if(gr[u] == 2) fb[tplt]++;
		for(int v : g[u]) if(dd[v] == 0){
			dfs(v);
		}
	}
	int process(){
		fod(i,1,m){
			if(e[i].c <= W - 1){
				g[e[i].u].pb(e[i].v);
				g[e[i].v].pb(e[i].u);
			}
		}	
		
		fod(i,1,n) if(dd[i] == 0) tplt++, dfs(i);
		int r2 = 0;
		fod(i,1,tplt) r2 += fa[i] * fb[i];
		return r2;
	}
}
namespace sub_task1{
    void solve(){
    	fod(i,1,na){int x; cin >> x; gr[x] = 1;}
    	fod(i,1,nb){int x; cin >> x; gr[x] = 2;}
    	
		int r1 = find_r1 :: process();
		int r2 = find_r2 :: process();
		
		cout << r1 - r2;
    	// fa[i] = sl dinh trong A thuoc tplt i
    	// fb[i] = sl dinh trong B thuoc tplt i)
    	// r1 = tong(1..tplt) fa[i] * fb[i]
    	// dem sl cap (u,v) co WEIGHT of duong di <= W = r1
    	// dem sl cap (u, v) co WEIGHT co duong di <= W - 1 = r2
    	// res = r1 - r2
    }	
    
}

signed main(){
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    if(fopen(name".inp", "r")){
      freopen(name".inp", "r", stdin);
      freopen(name".out", "w", stdout);
    }
    int Test = 1; if(multitest) cin >> Test;
    init();
    while(Test--){
        inp();
        sub_task1 :: solve();
    }
    kill();
}