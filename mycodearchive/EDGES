// hiensumi: Maybe, success will come tomorrow. Thus, just keep trying! =) "Z/x
#include "bits/stdc++.h"
#define fod(i,a,b) for(int i = a;i <= b; i++)
#define fok(i,a,b) for(int i = a;i >= b; i--)
#define ll long long
#define int long long
#define fi first
#define se second
#define mask(i) (1LL<<(i))
#define BITpos(a,i) ((a >> i) & 1LL)
#define pb push_back
#define el '\n'
#define all(v) v.begin(), v.end()
#define odd(i) (i & 1LL)
using namespace std;
typedef pair<int, int> ii;
const int MOD = 1e9 + 7;
inline void kill(){cerr << "\nTime: " << clock() << "ms\n"; cerr << "⏁⊑⟒ ⋔⍜⍜⋏ ⍙⏃⌇ ⌇⍜ ⏚⟒⏃⎍⏁⟟⎎⎍⌰ ⏁⊑⏃⏁ ⏁⊑⟒⍀⟒ ⍙⏃⌇ ⏃ ⋔⟟⍀⍀⍜⍀ ⟟⋏ ⏁⊑⟒ ⍜☊⟒⏃⋏.\n"; exit(0);}
inline void add(int &x, int y, int mod = MOD) { x += y; while (x >= mod) x -= mod; while (x < 0) x += mod;}
inline void mul(int &x, int y, int mod = MOD) { x = (x * 1LL * y) % mod;}
inline int bpow(int x, int y, int mod = MOD) { int ans = 1; while (y) { if (y & 1) mul(ans, x, mod); mul(x, x, mod); y >>= 1;} return ans;}
inline int bp(int a, int b){int res = 1; while (b > 0) {if (b & 1) res = res * a; a = a * a; b >>= 1; } return res;}
inline int Inv(int x, int mod = MOD) { return bpow(x, mod - 2, mod);}
inline int Div(int x, int y, int mod = MOD) { int tmp = x; mul(tmp, Inv(y, mod), mod); return tmp;}
template<class T> bool mini(T& a,T b){return (a>=b)?a=b,1:0;}
template<class T> bool maxi(T& a,T b){return (a<=b)?a=b,1:0;}
struct point{int x, y;};
struct edge{int u, v, c;};
/*int find(int u) { if (par[u] == u) return u; return par[u] = find(par[u]);}
bool join(int u, int v) {int paru = find(u), parv = find(v); if (paru == parv) return false; par[parv] = paru; return true; }*/ 
const ll INF = 1e18, base = 1e6 + 5, multitest = 0;
//"Life is a daring adventure or it is nothing at all." -Helen Keller...
//"Success isn't determined by how many times you win, but by how you play the week after you lose." -Pele...
#define name ""
#define ld long double
// remember to reset value for multitestcase
// she is your motivation!!!(
void init(){
    
}
// nen do thi thanh cac dinh voi tplt manh
int f[base], dis[base], dd[base],n, m1, m2, mark[base];
vector <int> adj[base]; // do thi de nen
vector <ii> g[base]; // do thi sau
int low[base], num[base], tplt[base], scc = 0, stt = 0;
stack <int> st;
void dfs(int u, int p){
	stt++;
	low[u] = num[u] = stt;
	st.push(u);
	for(int v : adj[u]){
		// if(v == p) continue;
		if(dd[v]) continue;
		if(num[v] != 0) low[u] = min(low[u], num[v]);
		else{
			dfs(v,u);
			low[u] = min(low[u], low[v]);
		}
	}
	
	if(low[u] == num[u]){
		int x;
		scc++;
		do{
			x = st.top();
			st.pop();
			tplt[x] = scc;
			dd[x] = 1;
		}while(x != u);
	}
}
void djikstra(int t){
	fod(i,1,scc) dis[i] = INF, dd[i] = 0;
	queue <int> q;
	q.push(t);
    dis[t] = 0;
    dd[t] = true;
    while (!q.empty()) {
        int u = q.front();
        q.pop();
        dd[u] = 0;
        for(auto [to, w] : g[u]) {
            if (dis[to] > dis[u] + w) {
                dis[to] = dis[u] + w;
                if (!dd[to]) {
                    q.push(to);
                    dd[to] = 1;
                }
            }
        }
	}
}
int in[base], out[base];
ii a[base];
void inp(){
	cin >> n >> m1;
	fod(i,1,m1){
		int u,v; cin >> u >> v;
		a[i]=make_pair(u,v);
		adj[u].pb(v);
	}
	
	fod(i,1,n) if(low[i] == 0){
		dfs(i,0);
	}
	fod(u,1,n){
		for(int v : adj[u]){
			int x = tplt[u], y = tplt[v];
			if(x == y) continue;
			in[y]++;
			out[x]++;
			g[x].pb(ii(y,0));
		}
	}
	// fod(i,1,m1){
		// int u = a[i].fi, v = a[i].se;
		// u = tplt[u]; v = tplt[v];
		// if(u == v) continue;
		// in[v]++;
		// out[u]++;
		// g[u].pb(ii(v,0));
	// }
}

namespace sub_task1{
    void solve(){
    	cin >> m2;
    	int res = 0;
    	fod(i,1,m2){
    		int u, v, c;
    		cin >> u >> v >> c;
    		u = tplt[u];
    		v = tplt[v];
    		if(c < 0) res += c, c=  0;
    		g[u].pb(ii(v,c));
    	}
    	int s = 0, t = 0;
    	fod(i,1,scc){
    		if(in[i] == 0) s = i;
    		if(out[i] == 0) t = i;
    	}
    	// cout << s << " " << t << el;
    	djikstra(t);
    	if(dis[s] == INF){
    		cout << "NO" << el;
    		kill();
    	}
    	else{
    		cout << "YES" << el;
    		cout << res + dis[s] << el;
    	}
    }	
    
}

signed main(){
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    if(fopen(name".inp", "r")){
      freopen(name".inp", "r", stdin);
      freopen(name".out", "w", stdout);
    }
    int Test = 1; if(multitest) cin >> Test;
    init();
    while(Test--){
        inp();
        sub_task1 :: solve();
    }
    kill();
}