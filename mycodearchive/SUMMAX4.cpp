#include <bits/stdc++.h>
#define ______________________________________________________________________________________________ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define _________________ long long
#define ___________________________________________ cin
#define ______________________________________________ cout
#define ____________________(___________,____________,b) for(_________________ ___________ = ____________;___________ <= b; ___________++)
#define _____________________(___________,____________,b) for(_________________ ___________ = ____________;___________ >= b; ___________--)
#define ____ 200005
#define fi first
#define se second
#define name ""
#define db double
#define mask(___________) (1LL<<(___________))
#define pb push_back
using namespace std;
const _________________ MOD = 1e9 + 7;
_________________ __, ___, ______[____], _______[____], _______________________[____], ____________[____], __________________________[____], p[____][21];
vector <_________________> _____[____];
void dfs(_________________ ________________________, _________________ ____________________________){
	for(_________________ _________________________ : _____[________________________]){
		if(_________________________ == ____________________________) continue;
		dfs(_________________________,________________________);
		______[________________________] += ______[_________________________];
		_______[________________________] += ______[_________________________] + _______[_________________________];
	}
}
void get(_________________ ________________________, _________________ ____________________________){
	_______________________[________________________] = _______________________[____________________________] - 2 * ______[________________________] + __;
	// _______________________[________________________] = _______________________[____________________________] - 2 * ______[________________________] + __ - _______[________________________] + _______[________________________] 
	for(_________________ _________________________ : _____[________________________]){
		if(_________________________ == ____________________________) continue;
		get(_________________________,________________________);
	}
}
void DFS(_________________ ________________________, _________________ ____________________________){
	for(_________________ _________________________ : _____[________________________]){
		if(_________________________ == ____________________________) continue;
		__________________________[_________________________] = __________________________[________________________] + 1;
		p[_________________________][0] = ________________________;
		____________________(j,1,log2(__)){
			p[_________________________][j] = p[p[_________________________][j-1]][j-1];
		}
		DFS(_________________________,________________________);
	}
}
_________________ ___________________________(_________________ ________________________, _________________ _________________________){
    if (__________________________[________________________] < __________________________[_________________________]) swap(________________________,_________________________);
    _________________ k = __________________________[________________________] - __________________________[_________________________];
    for(_________________ j = 0; (1 << j) <= k; j++) if(k & (1 << j)) ________________________ = p[________________________][j];
    if (________________________ == _________________________) return ________________________;
    _________________ d = log2(__________________________[________________________]);
    _____________________(j,d,0) if (p[________________________][j] != p[_________________________][j]){
        ________________________ = p[________________________][j]; _________________________ = p[_________________________][j];
    }
    return p[________________________][0];
}
_________________ ______________________(_________________ ________________________, _________________ _________________________){
	return __________________________[________________________] + __________________________[_________________________] - 2 * __________________________[___________________________(________________________,_________________________)];
}
signed main(){
	______________________________________________________________________________________________
	if(fopen(".inp", "r")){
		freopen(".inp", "r", stdin);
	    freopen(".out", "w", stdout);
	}
	else if(fopen(name".inp", "r")){
	    freopen(name".inp", "r", stdin);
	    freopen(name".out", "w", stdout);
	}
	___________________________________________ >> __;
	____________________(___________,1,__) ___________________________________________ >> ____________[___________];
	____________________(___________,1,__){
		_________________ x;
		___________________________________________ >> x;
		_____[___________].pb(x);
		_____[x].pb(___________);
	}
	____________________(___________,1,__) ______[___________] = 1;
	dfs(1,0);
	DFS(1,0);
	vector <_________________> ________;
	_________________ _____________ = 0;
	_______________________[1] = _______[1];
	for(_________________ _________________________ : _____[1]) get(_________________________,1);
	____________________(___________,1,__) _____________ = max(_____________, _______________________[___________]);
	____________________(___________,1,__) if(_____________ == _______________________[___________]){
		________.pb(___________);
	}
	_________________ ______________________________ = 0;
	for(_________________ __________ : ________){
		_________________ _________ = 0;
		____________________(___________,1,__) _________ += ______________________(__________,___________) * ____________[___________];
		______________________________ = max(______________________________, _________);
	}
	________.clear();
	_________________ ______________ = 0;
	____________________(___________,1,__) if(_______________________[___________] != _____________) ______________ = max(______________, _______________________[___________]);
	____________________(___________,1,__) if(______________ == _______________________[___________]){
		________.pb(___________);
	}
	for(_________________ __________ : ________){
		_________________ _________ = 0;
		____________________(___________,1,__) _________ += ______________________(__________,___________) * ____________[___________];
		______________________________ = max(______________________________, _________);
	}
	______________________________________________ << ______________________________;
	return 0;
}